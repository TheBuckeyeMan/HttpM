name: Library CI/CD Pipeline

on:
  push:
    branches:
      - master
      - dev

jobs:
  # Job 1: Extract Version and Test the Library
  Test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Extract Version from pom.xml
        id: get_version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$version" >> $GITHUB_ENV
          echo "::set-output name=version::$version"

      - name: Run Tests
        run: mvn test
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports/

  # Job 2: Static Analysis and Scanning
  Scan:
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

    #   - name: Run Checkstyle Analysis
    #     run: mvn checkstyle:check
        
    #   - name: List Files in Host Repo
    #     run: ls -la $GITHUB_WORKSPACE

    #   - name: Verify JAVA_HOME
    #     run: echo "JAVA_HOME is set to $JAVA_HOME"
    
    #   - name: Set JAVA_HOME
    #     run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

    #   - name: OWASP Dependency Check
    #     uses: dependency-check/Dependency-Check_Action@1.1.0
    #     with:
    #       project: HttpM
    #       format: 'ALL'
    #       path: './'
    #     env:
    #       JAVA_HOME: ${{ env.JAVA_HOME }}

  # Job 3: Build the Library
  Build:
    runs-on: ubuntu-latest
    needs: [Test, Scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Build Library
        run: mvn clean package
        #Delete after we figure out  solution
      - name: Inspect Artifact Contents
        run: |
          echo "Inspecting JAR contents..."
          jar tf target/*.jar
          echo "Inspecting POM metadata inside JAR..."
          jar xf target/*.jar META-INF/MANIFEST.MF && cat META-INF/MANIFEST.MF

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar-file
          path: |
            target/*.jar
            pom.xml

  # Job 4: Deploy to GitHub Packages
  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: jar-file

      - name: Debug Authentication
        run: |
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          echo "GITHUB_TOKEN: ${{ secrets.GH_LIBRARY_TOKEN }}"
          echo "TOKEN_LENGTH: $(echo -n ${{ secrets.GH_LIBRARY_TOKEN }} | wc -c)"

      - name: Configure Maven for GitHub Packages
        run: |
            mkdir -p ~/.m2
            echo '<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
                <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GH_LIBRARY_TOKEN }}</password>
                </server>
            </servers>
            </settings>' > ~/.m2/settings.xml
        #Delete after we figure out
      - name: Inspect Artifact Contents (After Configure Maven)
        run: |
            echo "Inspecting JAR contents after configuring Maven..."
            jar tf target/*.jar
            echo "Inspecting POM metadata inside JAR..."
            jar xf target/*.jar META-INF/MANIFEST.MF && cat META-INF/MANIFEST.MF

      - name: Deploy Library to GitHub Packages
        working-directory: ${{ github.workspace }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_LIBRARY_TOKEN }}
          LIBRARY_VERSION: ${{ needs.Test.outputs.version }}
        run: |
            echo "Deploying from working directory: $(pwd)"
            mvn deploy -DskipTests -Dproject.version=${{ env.LIBRARY_VERSION }} -X
